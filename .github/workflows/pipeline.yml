name: Pipeline

on:
  push:
#    branches:
#      - '*'
#      - '!master'
  pull_request:
    types:
      - closed
  release:
    types:
      - prereleased
      - released
    tags:
      - 'v*'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_DEFAULT_REGION: 'us-east-1'
  AWS_STORAGE_BUCKET_NAME: 'nr-clone'
  S3_REPO_URL: 's3://nr-clone'
  TAG: ${{ github.event.release.tag_name }}
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  GITHUB_WORKSPACE: ${{ github.workspace }}
  REPO_NAME: ${{ github.event.repository.name }}
  REPO_FULL_NAME: ${{ github.event.repository.full_name }}
  GPG_APT_PRIVATE_KEY: ${{ secrets.GPG_APT_PRIVATE_KEY_BASE64 }} # base64 encoded
  GPG_APT_PASSPHRASE: ${{ secrets.GPG_APT_PASSPHRASE }}
  GPG_APT_MAIL: 'infrastructure-eng@newrelic.com' # Mail associated to GPG key
  GPG_RPM_PRIVATE_KEY: ${{ secrets.GPG_RPM_PRIVATE_KEY_BASE64 }} # base64 encoded
  GPG_RPM_PASSPHRASE: ${{ secrets.GPG_RPM_PASSPHRASE }}
  GPG_RPM_MAIL: 'infrastructure-eng@newrelic.com'
  PFX_KEY: ${{ secrets.PFX_KEY }} # base64 encoded
  PFX_PASSPHRASE: ${{ secrets.PFX_PASSPHRASE }}
  DYNAMO_TABLE_NAME: 's3-repo-lock'
  DEPOT_REPO: 'https://github.com/jportasa/depot'

jobs:
#
#
#  Build binaries/packages
#
##
#  goreleaser:
#    name: Goreleaser
#    if: github.event.action == 'released'
#    runs-on: ubuntu-latest
#    env:
#      GITHUB_PUSH_RELEASE_ASSETS: false
#    steps:
#      - uses: actions/checkout@v2
#      - name: Unshallowify the repo clone # So GoReleaser can generate the changelog properly
#        run: git fetch --prune --unshallow
#      - name: Check GH event is Release or Prerelease
#        if: github.event_name == 'release'
#        run: echo "::set-env name=GITHUB_PUSH_RELEASE_ASSETS::true"
#      - name: Create binaries/.deb/rpm & Push to GH Release Assets (if Release/Prerelease)
#        env:
#          GITHUB_REF: $GITHUB_REF
#          PROJECTNAME: $REPO_NAME
#          GOPATH: '/go'
#        run: |
#          cd cicd
#          docker-compose --file docker_compose_goreleaser.yml run goreleaser

  tarballs:
    name: Tarballs for Linux & Win creation
    if: github.event.action == 'released'
#    needs: [goreleaser]
    runs-on: ubuntu-latest
    env:
      GITHUB_PUSH_RELEASE_ASSETS: false
    steps:
      - uses: actions/checkout@v2
      - name: Unshallowify the repo clone # So GoReleaser can generate the changelog properly
        run: git fetch --prune --unshallow
      - name: Check GH event is Release or Prerelease
        if: github.event_name == 'release'
        run: echo "::set-env name=GITHUB_PUSH_RELEASE_ASSETS::true"
      - name: Create tarballs for Linux & Windows and push to GH Release Assets (if Release/Prerelease)
        run: |
          cd cicd
          docker-compose --file docker_compose_tarball_creator.yml run tarballcreator

#  msi:
#    name: MSI creation
#    if: github.event.action == 'released'
#    needs: [goreleaser]
#    runs-on: windows-2019
#    steps:
#    - name: Check out code into the Go module directory
#      uses: actions/checkout@v1
#    - name: Get PFX certificate
#      shell: bash
#      run: |
#        printf "%s" "$PFX_KEY" | base64 -d - > ./pkg/windows/nri-${{ matrix.goarch }}-installer/mycert.pfx
#    - name: Create msi
#      shell: pwsh
#      run: |

#  s3-apt-update:
#    name: S3 repo APT update
##    if: github.event.action == 'released'
##    needs: [goreleaser]
#    runs-on: ubuntu-latest
#    env:
#      BASE_PATH: "infrastructure_agent/linux/apt"
#      LOCK_REPO_TYPE: 'apt' # yum | apt | zypp | win
#    steps:
#    - uses: actions/checkout@v2
#    - name: Update APT repo
#      run: |
#        cd cicd
#        source scripts/pipeline_functions.sh
#        create_dynamo_table
#        wait_free_lock
#        lock
#        docker-compose --file docker_compose_apt_updater.yml run release
#        release_lock
