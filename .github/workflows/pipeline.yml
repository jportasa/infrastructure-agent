name: Pipeline

on:
  push:
    branches:
      - '**'
      - '!master'
  pull_request:
    types:
      - closed
  release:
    types:
      - prereleased
      - released
    tags:
      - 'v*'

env:
  AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
  AWS_DEFAULT_REGION: 'us-east-1'
  AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
  AWS_S3_FQDN: 'nr-clone.s3.amazonaws.com' # 'download.newrelic.com'
  AWS_S3_REPO_URL: 's3://nr-clone'
  AWS_STORAGE_BUCKET_NAME: 'nr-clone'
  DEPOT_REPO: 'https://github.com/jportasa/depot' # Script to push .deb to APT repo
  DOCKERHUB_NAMESPACE: jportasa
  DOCKERHUB_PASSWORD: ${{ secrets.DOCKERHUB_PASSWORD }}
  DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
  DYNAMO_TABLE_NAME: 's3-repo-lock'
  FASTLY_API_KEY: ${{ secrets.FASTLY_API_KEY }}
  FASTLY_SERVICE_ID: '2RMeBJ1ZTGnNJYvrWMgQhk'
  FLUENTBIT_VERSION: '1.3.0'
  GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}
  GITHUB_WORKSPACE: ${{ github.workspace }}
  GPG_APT_MAIL: 'infrastructure-eng@newrelic.com' # Mail associated to GPG key
  GPG_APT_PASSPHRASE: ${{ secrets.GPG_APT_PASSPHRASE }}
  GPG_APT_PRIVATE_KEY: ${{ secrets.GPG_APT_PRIVATE_KEY_BASE64 }} # Base64 encoded
  GPG_RPM_PASSPHRASE: ${{ secrets.GPG_RPM_PASSPHRASE }}
  GPG_RPM_PRIVATE_KEY_BASE64: ${{ secrets.GPG_RPM_PRIVATE_KEY_BASE64 }}
  NRI_DOCKER_ARCH: amd64
  NRI_DOCKER_VERSION: 1.3.0
  NRI_FLEX_ARCH: x86_64
  NRI_FLEX_OS: Linux
  NRI_FLEX_VERSION: 1.3.2
  PFX_CERTIFICATE_BASE64: ${{ secrets.PFX_CERTIFICATE_BASE64 }} # base64 encoded
  PFX_PASSPHRASE: ${{ secrets.PFX_PASSPHRASE }}
  REPO_FULL_NAME: ${{ github.event.repository.full_name }}
  REPO_NAME: ${{ github.event.repository.name }}
  SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
  SLACK_CHANNEL: 'ohai-bots'
  TAG: ${{ github.event.release.tag_name }}

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - name: Install Go
        uses: actions/setup-go@v2
        with:
          go-version: '^1.14.4'
      - name: Validate code
        run: make validate

      - name: Running unit tests
        run: make test-coverage

      - name: Install gcov2lcov
        working-directory: /tmp
        run: go get -u github.com/jandelgado/gcov2lcov

      - name: Convert coverage.out to lcov.info
        run: gcov2lcov -infile=coverage.out -outfile=lcov.info

      - name: Coveralls Parallel
        uses: coverallsapp/github-action@master
        with:
          github-token: $GITHUB_TOKEN
          path-to-lcov: lcov.info
          flag-name: run-linux
          parallel: true
